/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 *
 * @providesModule writeRelayQLFile
 */

'use strict';

var _extends3 = _interopRequireDefault(require('babel-runtime/helpers/extends'));

var _stringify2 = _interopRequireDefault(require('babel-runtime/core-js/json/stringify'));

var _promise2 = _interopRequireDefault(require('fbjs/lib/Promise'));

var _asyncToGenerator3 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));

var writeRelayQLFile = function () {
  var _ref = (0, _asyncToGenerator3['default'])(function* (codegenDir, generatedNode, persistQuery, platform) {
    var moduleName = generatedNode.name + '.graphql';
    var platformName = platform ? moduleName + '.' + platform : moduleName;
    var filename = platformName + '.js';
    var flowTypeName = generatedNode.kind === 'Batch' ? 'ConcreteBatch' : 'ConcreteFragment';

    var text = null;
    var hash = null;
    if (generatedNode.kind === 'Batch') {
      text = generatedNode.text;
      !text ? process.env.NODE_ENV !== 'production' ? invariant(false, 'codegen-runner: Expected query to have text before persisting.') : invariant(false) : void 0;
      var oldContent = codegenDir.read(filename);
      // Hash the concrete node including the query text.
      hash = md5((0, _stringify2['default'])(generatedNode) + (persistQuery ? 'persisted' : '') + 'cache-breaker-3');
      if (hash === extractHash(oldContent)) {
        codegenDir.markUnchanged(filename);
        return null;
      }
      if (codegenDir.onlyValidate) {
        codegenDir.markUpdated(filename);
        return null;
      }
      if (persistQuery) {
        generatedNode = (0, _extends3['default'])({}, generatedNode, {
          text: null,
          id: yield persistQuery(text)
        });
      }
    }

    var moduleText = generateModule({
      moduleName: moduleName,
      documentName: generatedNode.name,
      documentType: flowTypeName,
      docText: text,
      hash: hash,
      concreteText: require('./prettyStringify')(generatedNode)
    });

    codegenDir.writeFile(filename, moduleText);
    return generatedNode;
  });

  return function writeRelayQLFile(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function extractHash(text) {
  if (!text) {
    return null;
  }
  if (/<<<<<|>>>>>/.test(text)) {
    // looks like a merge conflict
    return null;
  }
  var match = text.match(/^ \* @relayHash (\w{32})$/m);
  return match && match[1];
}

/**
 * Generate a module for the given document name/text.
 */
function generateModule(_ref2) {
  var moduleName = _ref2.moduleName,
      documentName = _ref2.documentName,
      documentType = _ref2.documentType,
      docText = _ref2.docText,
      concreteText = _ref2.concreteText,
      hash = _ref2.hash;

  var docTextComment = docText ? '\n/*\n' + docText.trim() + '\n*/\n' : '';
  var hashText = hash ? '\n * @relayHash ' + hash : '';
  var source = '/**\n * Copyright 2004-present Facebook. All Rights Reserved.\n *\n * This file was generated by:\n *   js1 build relay\n *\n * ' + '@' + 'providesModule ' + moduleName + '\n * ' + require('signedsource').getSigningToken() + hashText + '\n * ' + '@' + 'flow\n * ' + '@' + 'nogrep\n */\n\n\'use strict\';\n\nimport type {' + documentType + '} from \'RelayConcreteNode\';\n\n/* eslint-disable comma-dangle, quotes */\n' + docTextComment + '\nconst ' + documentName + ': ' + documentType + ' = ' + concreteText + ';\n\nmodule.exports = ' + documentName + ';\n';
  return require('signedsource').signFile(source);
}

function md5(text) {
  return require('crypto').createHash('md5').update(text).digest('hex');
}

module.exports = writeRelayQLFile;
