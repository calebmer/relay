/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule RelayTestSchema
 * 
 */

'use strict';

var _require = require('graphql'),
    buildASTSchema = _require.buildASTSchema,
    parse = _require.parse;

/* eslint-disable comma-dangle, quotes */


module.exports = buildASTSchema(parse('\nschema {\n  query: Root\n  mutation: Mutation\n  subscription: Subscription\n}\n\ntype Root {\n  checkinSearchQuery(query: CheckinSearchInput): CheckinSearchResult\n  defaultSettings: Settings,\n  route(waypoints: [WayPoint!]!): Route\n  maybeNode: MaybeNode\n  neverNode: NeverNode\n  me: User\n  node(id: ID): Node\n  nodes(ids: [ID!]): [Node]\n  settings(environment: Environment): Settings\n  story: Story\n  task(number: Int): Task\n  username(name: String!): Actor\n  usernames(names: [String!]!): [Actor]\n  viewer: Viewer\n  _mutation: Mutation\n}\n\nunion MaybeNode = Story | FakeNode | NonNode\n\ntype FakeNode {\n  id: ID!\n}\n\ntype NonNode {\n  id: String\n  name: String\n}\n\nunion NeverNode = FakeNode | NonNode\n\ntype Task {\n  title: String\n}\n\ninput WayPoint {\n  lat: String\n  lon: String\n}\n\ntype Route {\n  steps: [RouteStep]\n}\n\ntype RouteStep {\n  lat: String\n  lon: String\n  note: String\n}\n\ntype Mutation {\n  actorSubscribe(input: ActorSubscribeInput): ActorSubscribeResponsePayload\n  applicationRequestDeleteAll(input: ApplicationRequestDeleteAllInput): ApplicationRequestDeleteAllResponsePayload\n  commentCreate(input: CommentCreateInput): CommentCreateResponsePayload\n  commentDelete(input: CommentDeleteInput): CommentDeleteResponsePayload\n  feedbackLike(input: FeedbackLikeInput): FeedbackLikeResponsePayload\n  feedbackLikeSubscribe(input: FeedbackLikeInput): FeedbackLikeResponsePayload\n  nodeSavedState(input: NodeSaveStateInput): NodeSavedStateResponsePayload\n  unfriend(input: UnfriendInput): UnfriendResponsePayload\n  viewerNotificationsUpdateAllSeenState(input: UpdateAllSeenStateInput): ViewerNotificationsUpdateAllSeenStateResponsePayload\n}\n\ntype Subscription {\n  feedbackLikeSubscribe(input: FeedbackLikeInput): FeedbackLikeResponsePayload\n}\n\ninput ActorSubscribeInput {\n  clientMutationId: String\n  subscribeeId: ID\n}\n\ninput ApplicationRequestDeleteAllInput {\n  clientMutationId: String\n  deletedRequestIds: [ID]\n}\n\ninput CommentCreateInput {\n  clientMutationId: String\n  feedbackId: ID\n}\n\ninput CommentDeleteInput {\n  clientMutationId: String\n  commentId: ID\n}\n\ninput FeedbackLikeInput {\n  clientMutationId: String\n  feedbackId: ID\n}\n\ninput NodeSaveStateInput {\n  clientMutationId: String\n  nodeId: ID\n}\n\ninput UpdateAllSeenStateInput {\n  clientMutationId: String\n  storyIds: [ID]\n}\n\ntype ActorSubscribeResponsePayload {\n  clientMutationId: String\n  subscribee: Actor\n}\n\ntype ApplicationRequestDeleteAllResponsePayload {\n  clientMutationId: String\n  deletedRequestIds: [ID]\n}\n\ntype CheckinSearchResult {\n  query: String\n}\n\ninput CheckinSearchInput {\n  query: String\n}\n\ntype Comment implements Node {\n  actor: Actor\n  actors: [Actor]\n  actorCount: Int\n  address: StreetAddress\n  allPhones: [Phone]\n  author: User\n  backgroundImage: Image\n  birthdate: Date\n  body: Text\n  canViewerComment: Boolean\n  canViewerLike: Boolean\n  comments(first: Int, last: Int, orderby: String): CommentsConnection\n  doesViewerLike: Boolean\n  emailAddresses: [String]\n  feedback: Feedback\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: ID, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  likers(first: Int): LikersOfContentConnection\n  likeSentence: Text\n  message: Text\n  name: String\n  profilePicture(size: Int, preset: PhotoSize): Image\n  segments(first: Int): Segments\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  topLevelComments(first: Int): TopLevelCommentsConnection\n  tracking: String\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n  viewerSavedState: String\n}\n\ntype CommentCreateResponsePayload {\n  clientMutationId: String\n  comment: Comment\n  feedback: Feedback\n  feedbackCommentEdge: CommentsEdge\n  viewer: Viewer\n}\n\ntype CommentDeleteResponsePayload {\n  clientMutationId: String\n  deletedCommentId: ID\n  feedback: Feedback\n}\n\ntype CommentsConnection {\n  count: Int\n  edges: [CommentsEdge]\n  pageInfo: PageInfo\n}\n\ntype CommentsEdge {\n  cursor: String\n  node: Comment\n  source: Feedback\n}\n\ntype ConfigsConnection {\n  edges: [ConfigsConnectionEdge]\n  pageInfo: PageInfo\n}\n\ntype ConfigsConnectionEdge {\n  node: Config\n}\n\ntype Config {\n  name: String\n  isEnabled: Boolean\n}\n\ntype Date {\n  day: Int\n  month: Int\n  year: Int\n}\n\ntype Feedback implements Node {\n  actor: Actor\n  actors: [Actor]\n  actorCount: Int\n  address: StreetAddress\n  allPhones: [Phone]\n  author: User\n  backgroundImage: Image\n  birthdate: Date\n  body: Text\n  canViewerComment: Boolean\n  canViewerLike: Boolean\n  comments(first: Int, last: Int, orderby: String): CommentsConnection\n  doesViewerLike: Boolean\n  emailAddresses: [String]\n  feedback: Feedback\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: ID, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  likers(first: Int): LikersOfContentConnection\n  likeSentence: Text\n  message: Text\n  name: String\n  profilePicture(size: Int, preset: PhotoSize): Image\n  segments(first: Int): Segments\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  topLevelComments(first: Int): TopLevelCommentsConnection\n  tracking: String\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n  viewerSavedState: String\n}\n\ntype FeedbackLikeResponsePayload {\n  clientMutationId: String\n  clientSubscriptionId: String\n  feedback: Feedback\n}\n\ninterface FeedUnit {\n  actor: Actor\n  actorCount: Int\n  feedback: Feedback\n  id: ID!\n  message: Text\n  tracking: String\n}\n\ntype FriendsConnection {\n  count: Int\n  edges: [FriendsEdge]\n  pageInfo: PageInfo\n}\n\ntype FriendsEdge {\n  cursor: String\n  node: User\n  source: User\n}\n\ntype Image {\n  uri: String\n  width: Int\n  height: Int\n}\n\ntype LikersOfContentConnection {\n  count: Int\n  edges: [LikersEdge]\n  pageInfo: PageInfo\n}\n\ntype LikersEdge {\n  cursor: String\n  node: Actor\n}\n\ninterface Named {\n  name: String\n}\n\ntype NewsFeedConnection {\n  edges: [NewsFeedEdge]\n  pageInfo: PageInfo\n}\n\ntype NewsFeedEdge {\n  cursor: String\n  node: FeedUnit\n  sortKey: String\n  showBeeper: Boolean\n}\n\ninterface Node {\n  actor: Actor\n  actors: [Actor]\n  actorCount: Int\n  address: StreetAddress\n  allPhones: [Phone]\n  author: User\n  backgroundImage: Image\n  birthdate: Date\n  body: Text\n  canViewerComment: Boolean\n  canViewerLike: Boolean\n  comments(first: Int, last: Int, orderby: String): CommentsConnection\n  doesViewerLike: Boolean\n  emailAddresses: [String]\n  feedback: Feedback\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: ID, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  likers(first: Int): LikersOfContentConnection\n  likeSentence: Text\n  message: Text\n  name: String\n  profilePicture(size: Int, preset: PhotoSize): Image\n  segments(first: Int): Segments\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  topLevelComments(first: Int): TopLevelCommentsConnection\n  tracking: String\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n  viewerSavedState: String\n}\n\ninterface Actor {\n  address: StreetAddress\n  allPhones: [Phone]\n  birthdate: Date\n  emailAddresses: [String]\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: ID, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  name: String\n  profilePicture(size: Int, preset: PhotoSize): Image\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n}\n\ntype NodeSavedStateResponsePayload {\n  node: Node\n}\n\ntype Page implements Node Actor {\n  actor: Actor\n  actors: [Actor]\n  actorCount: Int\n  address: StreetAddress\n  allPhones: [Phone]\n  author: User\n  backgroundImage: Image\n  birthdate: Date\n  body: Text\n  canViewerComment: Boolean\n  canViewerLike: Boolean\n  comments(first: Int, last: Int, orderby: String): CommentsConnection\n  doesViewerLike: Boolean\n  emailAddresses: [String]\n  feedback: Feedback\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: ID, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  likers(first: Int): LikersOfContentConnection\n  likeSentence: Text\n  message: Text\n  name: String\n  profilePicture(size: Int, preset: PhotoSize): Image\n  segments(first: Int): Segments\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  topLevelComments(first: Int): TopLevelCommentsConnection\n  tracking: String\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n  viewerSavedState: String\n}\n\ntype PageInfo {\n  hasPreviousPage: Boolean\n  hasNextPage: Boolean\n  endCursor: String\n  startCursor: String\n}\n\ntype PendingPostsConnection {\n  count: Int\n  edges: [PendingPostsConnectionEdge]\n  pageInfo: PageInfo\n}\n\ntype PendingPostsConnectionEdge {\n  cursor: String\n  node: PendingPost\n}\n\ntype PendingPost {\n  text: String\n}\n\ntype Phone {\n  isVerified: Boolean\n  phoneNumber: PhoneNumber\n}\n\ntype PhoneNumber {\n  displayNumber: String\n  countryCode: String\n}\n\ntype Screenname {\n  name: String\n  service: String\n}\n\ntype Segments {\n  edges: SegmentsEdge\n}\n\ntype SegmentsEdge {\n  node: String\n}\n\ntype NonNodeStory implements FeedUnit {\n  actor: Actor\n  actorCount: Int\n  feedback: Feedback\n  id: ID!\n  message: Text\n  tracking: String\n}\n\ntype PhotoStory implements FeedUnit Node {\n  # PhotoStory\n  photo: Image\n\n  # FeedUnit\n  canViewerDelete: Boolean\n  seenState: String\n\n  # Node\n  actor: Actor\n  actors: [Actor]\n  actorCount: Int\n  address: StreetAddress\n  allPhones: [Phone]\n  author: User\n  backgroundImage: Image\n  birthdate: Date\n  body: Text\n  canViewerComment: Boolean\n  canViewerLike: Boolean\n  comments(first: Int, last: Int, orderby: String): CommentsConnection\n  doesViewerLike: Boolean\n  emailAddresses: [String]\n  feedback: Feedback\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: ID, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  likers(first: Int): LikersOfContentConnection\n  likeSentence: Text\n  message: Text\n  name: String\n  profilePicture(size: Int, preset: PhotoSize): Image\n  segments(first: Int): Segments\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  topLevelComments(first: Int): TopLevelCommentsConnection\n  tracking: String\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n  viewerSavedState: String\n}\n\ntype Story implements FeedUnit Node {\n  # FeedUnit\n  canViewerDelete: Boolean\n  seenState: String\n\n  # Node\n  actor: Actor\n  actors: [Actor]\n  actorCount: Int\n  address: StreetAddress\n  allPhones: [Phone]\n  author: User\n  backgroundImage: Image\n  birthdate: Date\n  body: Text\n  canViewerComment: Boolean\n  canViewerLike: Boolean\n  comments(first: Int, last: Int, orderby: String): CommentsConnection\n  doesViewerLike: Boolean\n  emailAddresses: [String]\n  feedback: Feedback\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: ID, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  likers(first: Int): LikersOfContentConnection\n  likeSentence: Text\n  message: Text\n  name: String\n  profilePicture(size: Int, preset: PhotoSize): Image\n  segments(first: Int): Segments\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  topLevelComments(first: Int): TopLevelCommentsConnection\n  tracking: String\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n  viewerSavedState: String\n}\n\ntype StreetAddress {\n  city: String\n  country: String\n  postal_code: String\n  street: String\n}\n\n\ntype SubscribersConnection {\n  count: Int\n  edges: [FriendsEdge]\n  pageInfo: PageInfo\n}\n\ntype SubscribersEdge {\n  cursor: String\n  node: User\n  source: User\n}\n\ntype Text {\n  text: String\n  ranges: [String]\n}\n\ntype TimezoneInfo {\n  timezone: String\n}\n\ntype TopLevelCommentsConnection {\n  count: Int\n  edges: [CommentsEdge]\n  pageInfo: PageInfo\n  totalCount: Int\n}\n\ntype Type {\n  id: ID!\n  name: String\n}\n\ninput UnfriendInput {\n  clientMutationId: String\n  friendId: ID\n}\n\ntype UnfriendResponsePayload {\n  actor: Actor\n  clientMutationId: String\n  formerFriend: User\n}\n\ntype User implements Named Node Actor {\n  actor: Actor\n  actors: [Actor]\n  actorCount: Int\n  address: StreetAddress\n  allPhones: [Phone]\n  author: User\n  backgroundImage: Image\n  birthdate: Date\n  body: Text\n  canViewerComment: Boolean\n  canViewerLike: Boolean\n  checkins(environments: [Environment!]!): CheckinSearchResult\n  comments(first: Int, last: Int, orderby: String): CommentsConnection\n  doesViewerLike: Boolean\n  emailAddresses: [String]\n  feedback: Feedback\n  firstName(if: Boolean, unless: Boolean): String\n  friends(after: ID, before: ID, first: Int, last: ID, orderby: [String], find: String, isViewerFriend: Boolean, if: Boolean, unless: Boolean, traits: [PersonalityTraits]): FriendsConnection\n  hometown: Page\n  id: ID!\n  lastName: String\n  likers(first: Int): LikersOfContentConnection\n  likeSentence: Text\n  message: Text\n  name: String\n  storySearch(query: StorySearchInput): [Story]\n  storyCommentSearch(query: StoryCommentSearchInput): [Comment]\n  profilePicture(size: Int, preset: PhotoSize): Image\n  segments(first: Int): Segments\n  screennames: [Screenname]\n  subscribeStatus: String\n  subscribers(first: Int): SubscribersConnection\n  topLevelComments(first: Int): TopLevelCommentsConnection\n  tracking: String\n  traits: [PersonalityTraits]\n  url(relative: Boolean, site: String): String\n  websites: [String]\n  username: String\n  viewerSavedState: String\n}\n\ninput StorySearchInput {\n  text: String\n  limit: Int\n  offset: Int\n}\n\ninput StoryCommentSearchInput {\n  text: String\n  limit: Int\n  offset: Int\n}\n\ntype Viewer {\n  __configs__(named: [String]): ConfigsConnection\n  __type__: Type\n  actor: Actor\n  allTimezones: [TimezoneInfo]\n  isFbEmployee: Boolean\n  newsFeed(after: ID, first: Int, find: ID): NewsFeedConnection\n  notificationStories(after: ID, first: Int): NewsFeedConnection\n  pendingPosts(first: Int): PendingPostsConnection\n  primaryEmail: String\n  timezoneEstimate: TimezoneInfo\n}\n\ntype ViewerNotificationsUpdateAllSeenStateResponsePayload {\n  stories: [Story]\n}\n\nenum Environment {\n  WEB\n  MOBILE\n}\n\nenum PhotoSize {\n  SMALL\n  LARGE\n}\n\nenum PersonalityTraits {\n  CHEERFUL\n  DERISIVE\n  HELPFUL\n  SNARKY\n}\n\ntype Settings {\n  notificationSounds: Boolean\n  notifications(environment: Environment): Boolean\n}\n\ndirective @customDirective(level: Int!) on FIELD\n'));